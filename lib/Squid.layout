/*1

    XMon qubit. Anchor point is on the protect of the arm towards the resonator.

*/



point addSquidMSTU(cell* curCell, point anchorPoint, string direction,double arm_len ,int w_JJ, int h_JJ, int corr = 30, double asymmetry=0) {

    int bridge_width = 160;
    int structure_length = 16e3;
    int squid_width_top = 6.2e3;// distance between top pads
    int squid_width_bottom = 4e3;// distance between bottom pads 
    int pad_width = 8e3;
    int small_lead_width = 0.65e3;// width of pads
    int top_tiny_lead_length = 1e3;
    int bottom_tiny_lead_length = 1e3;
    int tiny_lead_outshoot = 1200;

    int left_w_JJ = h_JJ*(1-asymmetry)- corr;
    int right_w_JJ =  (1 + asymmetry) * h_JJ- corr;
    int left_h_JJ = w_JJ- corr;
    int right_h_JJ = w_JJ  - corr;

    string jjCell_name ="Squid:("+(left_w_JJ+corr);
    jjCell_name+= "x"+(left_h_JJ+corr);
    jjCell_name+=")";
    jjCell_name+="("+(right_w_JJ+corr);
    jjCell_name+="x"+(right_h_JJ+corr);
    jjCell_name+=")";
    jjCell_name+= "bridge:"+bridge_width;
    jjCell_name+= "d:"+asymmetry;
    jjCell_name+= "corr:"+corr;

    cell* curCellJJ;
    if (! layout->drawing->existCellname(jjCell_name)) {

        layout->drawing->newCell();
        layout->drawing->currentCell->cellName=jjCell_name;
        curCellJJ = layout->drawing->currentCell;


        //============ JJ pads ===========
        // =====  Top
        point cursor;
        cursor.set(0,8e3);

        point cursor_ct = wire(curCellJJ, aux, cursor, "d", 3e3, pad_width);

        cursor.set(cursor_ct.x()-squid_width_top/2-small_lead_width/2,cursor_ct.y());
        cursor = wire(curCellJJ, aux, cursor, "d", structure_length/4-left_h_JJ/2-1e3, small_lead_width);
        cursor.set(cursor.x()-small_lead_width/2,cursor.y()-left_h_JJ/2);
        wire(curCellJJ, aux, cursor, "r", top_tiny_lead_length+tiny_lead_outshoot, left_h_JJ);

        cursor.set(cursor_ct.x()+squid_width_top/2+small_lead_width/2,cursor_ct.y());
        cursor = wire(curCellJJ, aux, cursor, "d", structure_length/4-right_h_JJ/2-1e3, small_lead_width);
        cursor.set(cursor.x()+small_lead_width/2,cursor.y()-right_h_JJ/2);
        wire(curCellJJ, aux, cursor, "l", top_tiny_lead_length+tiny_lead_outshoot, right_h_JJ);

       // =====  Bottom


        cursor.set(0,-4e3);

        point cursor_cb = wire(curCellJJ, aux, cursor, "u", 3e3, pad_width);

        cursor.set(cursor_cb.x()-squid_width_bottom/2-small_lead_width/2,cursor_cb.y());
        cursor = wire(curCellJJ, aux, cursor, "u", structure_length/4-bottom_tiny_lead_length-1e3, small_lead_width);
        wire(curCellJJ, aux, cursor, "u", bottom_tiny_lead_length - left_h_JJ/2 - bridge_width, left_w_JJ);

        cursor.set(cursor_cb.x()+squid_width_bottom/2+small_lead_width/2,cursor_cb.y());
        cursor = wire(curCellJJ, aux, cursor, "u", structure_length/4-bottom_tiny_lead_length-1e3, small_lead_width);
        wire(curCellJJ, aux, cursor, "u", bottom_tiny_lead_length - right_h_JJ/2 - bridge_width, right_w_JJ);

        // ==== Merge aux structure to jj_layer

        layout->booleanTool->boolOnLayer(aux, aux, jj_layer, "A+B", 0, 0, 0);

        clearLayer(curCellJJ, aux);
        clearAllAuxiliaryAux(curCellJJ);

    } else {
        curCellJJ = layout->drawing->findCell(jjCell_name);
    }

    layout->drawing->setCell(sample_name);

    element *JJ_ref = curCell->addCellref(curCellJJ,
                                          newPoint(anchorPoint.x(),
                                                   anchorPoint.y()));
    JJ_ref->rotate(angleFromDirection(direction));

    point retPoint;
    retPoint.set(0, -arm_len-2*g_q);
    // retPoint.set(0, 0);
    retPoint = rotateVector(retPoint, anchorPoint, direction);

    return retPoint;
}

point addSquidMSTUSize(cell* curCell, point anchorPoint, string direction,double arm_len ,int w_JJ_l, int h_JJ_l,int w_JJ_r, int h_JJ_r, int corr = 30, double asymmetry=0) {

    int bridge_width = 160;
    int structure_length = 16e3;
    int squid_width_top = 6.2e3;// distance between top pads
    int squid_width_bottom = 4e3;// distance between bottom pads 
    int pad_width = 8e3;
    int small_lead_width = 0.65e3;// width of pads
    int top_tiny_lead_length = 1e3;
    int bottom_tiny_lead_length = 1e3;
    int tiny_lead_outshoot = 1200;

    int left_w_JJ = w_JJ_l- corr;
    int right_w_JJ =  w_JJ_r- corr;
    int left_h_JJ = h_JJ_l- corr;
    int right_h_JJ = h_JJ_r  - corr;

    string jjCell_name ="Squid:("+(left_w_JJ+corr);
    jjCell_name+= "x"+(left_h_JJ+corr);
    jjCell_name+=")";
    jjCell_name+="("+(right_w_JJ+corr);
    jjCell_name+="x"+(right_h_JJ+corr);
    jjCell_name+=")";
    jjCell_name+= "bridge:"+bridge_width;
    jjCell_name+= "d:"+asymmetry;
    jjCell_name+= "corr:"+corr;

    cell* curCellJJ;
    if (! layout->drawing->existCellname(jjCell_name)) {

        layout->drawing->newCell();
        layout->drawing->currentCell->cellName=jjCell_name;
        curCellJJ = layout->drawing->currentCell;


        //============ JJ pads ===========
        // =====  Top
        point cursor;
        cursor.set(0,8e3);

        point cursor_ct = wire(curCellJJ, aux, cursor, "d", 3e3, pad_width);

        cursor.set(cursor_ct.x()-squid_width_top/2-small_lead_width/2,cursor_ct.y());
        cursor = wire(curCellJJ, aux, cursor, "d", structure_length/4-left_h_JJ/2-1e3, small_lead_width);
        cursor.set(cursor.x()-small_lead_width/2,cursor.y()-left_h_JJ/2);
        wire(curCellJJ, aux, cursor, "r", top_tiny_lead_length+tiny_lead_outshoot, left_h_JJ);

        cursor.set(cursor_ct.x()+squid_width_top/2+small_lead_width/2,cursor_ct.y());
        cursor = wire(curCellJJ, aux, cursor, "d", structure_length/4-right_h_JJ/2-1e3, small_lead_width);
        cursor.set(cursor.x()+small_lead_width/2,cursor.y()-right_h_JJ/2);
        wire(curCellJJ, aux, cursor, "l", top_tiny_lead_length+tiny_lead_outshoot, right_h_JJ);

       // =====  Bottom


        cursor.set(0,-4e3);

        point cursor_cb = wire(curCellJJ, aux, cursor, "u", 3e3, pad_width);

        cursor.set(cursor_cb.x()-squid_width_bottom/2-small_lead_width/2,cursor_cb.y());
        cursor = wire(curCellJJ, aux, cursor, "u", structure_length/4-bottom_tiny_lead_length-1e3, small_lead_width);
        wire(curCellJJ, aux, cursor, "u", bottom_tiny_lead_length - left_h_JJ/2 - bridge_width, left_w_JJ);

        cursor.set(cursor_cb.x()+squid_width_bottom/2+small_lead_width/2,cursor_cb.y());
        cursor = wire(curCellJJ, aux, cursor, "u", structure_length/4-bottom_tiny_lead_length-1e3, small_lead_width);
        wire(curCellJJ, aux, cursor, "u", bottom_tiny_lead_length - right_h_JJ/2 - bridge_width, right_w_JJ);

        // ==== Merge aux structure to jj_layer

        layout->booleanTool->boolOnLayer(aux, aux, jj_layer, "A+B", 0, 0, 0);

        clearLayer(curCellJJ, aux);
        clearAllAuxiliaryAux(curCellJJ);

    } else {
        curCellJJ = layout->drawing->findCell(jjCell_name);
    }

    layout->drawing->setCell(sample_name);

    element *JJ_ref = curCell->addCellref(curCellJJ,
                                          newPoint(anchorPoint.x(),
                                                   anchorPoint.y()));
    JJ_ref->rotate(angleFromDirection(direction));

    point retPoint;
    retPoint.set(0, -arm_len-2*g_q);
    // retPoint.set(0, 0);
    retPoint = rotateVector(retPoint, anchorPoint, direction);

    return retPoint;
}


point addJJMSTU(cell* curCell, point anchorPoint, string direction,double arm_len ,int w_JJ, int h_JJ, int corr = 30) {

    int bridge_width = 160;
    int structure_length = 16e3;
    int squid_width_top = 2.2e3;// distance between top pads
    int squid_width_bottom = 4e3;// distance between bottom pads 
    int pad_width = 4e3;
    int small_lead_width = 0.65e3;// width of pads
    int top_tiny_lead_length = 1e3;
    int bottom_tiny_lead_length = 1e3;
    int tiny_lead_outshoot = 1200;

    int left_w_JJ = h_JJ- corr;
    int left_h_JJ = w_JJ- corr;
   
    string jjCell_name ="JJ:("+(left_w_JJ+corr);
    jjCell_name+= "x"+(left_h_JJ+corr);
    jjCell_name+=")";
    jjCell_name+= "bridge:"+bridge_width;
    jjCell_name+= "corr:"+corr;

    cell* curCellJJ;
    if (! layout->drawing->existCellname(jjCell_name)) {

        layout->drawing->newCell();
        layout->drawing->currentCell->cellName=jjCell_name;
        curCellJJ = layout->drawing->currentCell;


        //============ JJ pads ===========
        // =====  Top
        point cursor;
        cursor.set(0,8e3);

        point cursor_ct = wire(curCellJJ, aux, cursor, "d", 3e3, pad_width);
	cursor.set(cursor_ct.x()-squid_width_top/2-small_lead_width/2,cursor_ct.y());
        cursor = wire(curCellJJ, aux, cursor, "d", structure_length/4-left_h_JJ/2-1e3, small_lead_width);
        cursor.set(cursor.x()-small_lead_width/2,cursor.y()-left_h_JJ/2);
        wire(curCellJJ, aux, cursor, "r", top_tiny_lead_length+tiny_lead_outshoot, left_h_JJ);


       // =====  Bottom


        cursor.set(0,-4e3);

        point cursor_cb = wire(curCellJJ, aux, cursor, "u", 3e3, pad_width);
        cursor = wire(curCellJJ, aux, cursor_cb, "u", structure_length/4-bottom_tiny_lead_length-1e3, small_lead_width);
        wire(curCellJJ, aux, cursor, "u", bottom_tiny_lead_length - left_h_JJ/2 - bridge_width, left_w_JJ);
        // ==== Merge aux structure to jj_layer

        layout->booleanTool->boolOnLayer(aux, aux, jj_layer, "A+B", 0, 0, 0);

        clearLayer(curCellJJ, aux);
        clearAllAuxiliaryAux(curCellJJ);

    } else {
        curCellJJ = layout->drawing->findCell(jjCell_name);
    }

    layout->drawing->setCell(sample_name);

    element *JJ_ref = curCell->addCellref(curCellJJ,
                                          newPoint(anchorPoint.x(),
                                                   anchorPoint.y()));
    JJ_ref->rotate(angleFromDirection(direction));

    point retPoint;
    retPoint.set(0, -arm_len-2*g_q);
    // retPoint.set(0, 0);
    retPoint = rotateVector(retPoint, anchorPoint, direction);

    return retPoint;
}