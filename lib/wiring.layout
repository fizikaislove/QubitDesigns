


point addStripe(cell* curCell, int layer_str,int layer_gr, point start, string direction, int length, int width_str, int width_gr,bool addEnd=false) {

    if (direction=="u")  {// up
        curCell->addBox(start.x()-width_gr/2-width_str, start.y(), width_str*2+width_gr, length, layer_str);
	curCell->addBox(start.x()-width_gr/2, start.y(), width_gr, length, layer_gr);
        start.set(start.x(), start.y()+length);
	if (addEnd==true) {
		addEndToStripe(curCell, layer_str, start,"u", width_str*2+width_gr,width_str,width_gr);
	}
        return start;
    }

    if (direction=="d")  {  // down	
        curCell->addBox(start.x()-width_gr/2-width_str, start.y(),width_str*2+width_gr, -length, layer_str);
        curCell->addBox(start.x()-width_gr/2, start.y(), width_gr, -length, layer_gr);
        start.set(start.x(), start.y()-length);
	if (addEnd==true) {
		addEndToStripe(curCell, layer_str, start,"d", width_str*2+width_gr, width_str,width_gr);
	}
        return start;
    }

    if (direction=="r") {  // right
        curCell->addBox(start.x(), start.y()-width_gr/2-width_str, length, width_str*2+width_gr, layer_str);
	curCell->addBox(start.x(), start.y()-width_gr/2,  length, width_gr, layer_gr);
        start.set(start.x()+length, start.y());
	if (addEnd==true) {
		addEndToStripe(curCell, layer_str, start,"r", width_str*2+width_gr,width_str,width_gr);
	}
        return start;
    }

    if (direction=="l")  {  // left
       curCell->addBox(start.x(), start.y()-width_gr/2-width_str,- length, width_str*2+width_gr, layer_str);
	curCell->addBox(start.x(), start.y()-width_gr/2,  -length, width_gr, layer_gr);
        start.set(start.x()-length, start.y());
	if (addEnd==true) {
		addEndToStripe(curCell, layer_str, start,"l", width_str*2+width_gr,width_str,width_gr);
	}
        return start;
    }
}

void addEndToStripe(cell* curCell, int layer, point start, string direction, int length,int width_str, int width_gr) {
// up
    if (direction=="u") curCell->addBox(start.x()-width_gr/2-width_str, start.y(),length, width_str,  layer);
// down
    if (direction=="d") curCell->addBox(start.x()-width_gr/2-width_str, start.y()-width_str, length,width_str, layer);
 // right
    if (direction=="r") curCell->addBox(start.x(), start.y()-width_gr/2-width_str, width_str, length,  layer);
// left
    if (direction=="l") curCell->addBox(start.x()-width_str, start.y()-width_gr/2-width_str,  width_str,length, layer);
}

point wire(cell* curCell, int layer, point start, string direction, int length, int width) {

    if (direction=="u")  {// up
        curCell->addBox(start.x()-width/2, start.y(), width, length, layer);
        start.set(start.x(), start.y()+length);
        return start;
    };

    if (direction=="d")  {  // down	
        curCell->addBox(start.x()-width/2, start.y(), width, -length, layer);
        start.set(start.x(), start.y()-length);
        return start;
    }

    if (direction=="r") {  // right
        curCell->addBox(start.x(), start.y()-width/2, length, width, layer);
        start.set(start.x()+length, start.y());
        return start;
    }

    if (direction=="l")  {  // left
        curCell->addBox(start.x(), start.y()-width/2, -length, width, layer);
        start.set(start.x()-length, start.y());
        return start;
    }
}

point torusTurn(cell* curCell, int layer, point start, string direction, int radius, int width) {

    if (direction=="lu")  { // left+up
        point center;
        center.set(start.x(), start.y()+radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 180, 270 , layer);
        start.set(start.x()-radius, start.y()+radius);
        return start;
    };

    if (direction=="ld")  {  // left+down
        point center;
        center.set(start.x(), start.y()-radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 90, 180 , layer);
        start.set(start.x()-radius, start.y()-radius);
        return start;
    }

    if (direction=="ru") {  // right + up
        point center;
        center.set(start.x(), start.y()+radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 270, 360 , layer);
        start.set(start.x()+radius, start.y()+radius);
        return start;
    }

    if (direction=="rd")  {  // right + down
        point center;
        center.set(start.x(), start.y()-radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2,  0, 90 , layer);
        start.set(start.x()+radius, start.y()-radius);
        return start;
    }
    if (direction=="dl") {  // down + left
        point center;
        center.set(start.x()-radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 270, 0 , layer);
        start.set(start.x()-radius, start.y()-radius);
        return start;
    }

    if (direction=="dr")  {  // down + right
        point center;
        center.set(start.x()+radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 180, 270 , layer);
        start.set(start.x()+radius, start.y()-radius);
        return start;
    }
    if (direction=="ul") {  // up + right
        point center;
        center.set(start.x()-radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 0, 90 , layer);
        start.set(start.x()-radius, start.y()+radius);
        return start;
    }

    if (direction=="ur")  {  // up + right
        point center;
        center.set(start.x()+radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 90, 180 , layer);
        start.set(start.x()+radius, start.y()+radius);
        return start;
    }
}

point torusArbAngleTurn(cell* curCell, int layer, point start, string direction, int radius, int width, double angle) {

    if (direction=="lu")  { // left+up
        point center;
        center.set(start.x(), start.y()+radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 180, 180+angle , layer);
        start.set(start.x()-radius, start.y()+radius);
        return start;
    };

    if (direction=="ld")  {  // left+down
        point center;
        center.set(start.x(), start.y()-radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 90, 90+angle , layer);
        start.set(start.x()-radius, start.y()-radius);
        return start;
    }

    if (direction=="ru") {  // right + up
        point center;
        center.set(start.x(), start.y()+radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 270, 270+angle , layer);
        start.set(start.x()+radius, start.y()+radius);
        return start;
    }

    if (direction=="rd")  {  // right + down
        point center;
        center.set(start.x(), start.y()-radius);
        curCell->addPolygonArc(center, radius-width/2, radius+width/2,  90-angle, 90, layer);
        start.set(start.x()+radius, start.y()-radius);
        return start;
    }
    if (direction=="dl") {  // down + left
        point center;
        center.set(start.x()-radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 270, angle , layer);
        start.set(start.x()-radius, start.y()-radius);
        return start;
    }

    if (direction=="dr")  {  // down + right
        point center;
        center.set(start.x()+radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 180, 180+angle , layer);
        start.set(start.x()+radius, start.y()-radius);
        return start;
    }
    if (direction=="ul") {  // up + right
        point center;
        center.set(start.x()-radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 0, angle , layer);
        start.set(start.x()-radius, start.y()+radius);
        return start;
    }

    if (direction=="ur")  {  // up + right
        point center;
        center.set(start.x()+radius, start.y());
        curCell->addPolygonArc(center, radius-width/2, radius+width/2, 90, 90+angle , layer);
        start.set(start.x()+radius, start.y()+radius);
        return start;
    }
}





